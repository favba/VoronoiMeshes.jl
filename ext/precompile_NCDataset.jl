precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.issorted), Array{String, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(NCDatasets.nc_open), String, UInt16})
precompile(Tuple{Type{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32, Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32, Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), Type{Int32}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Int32, 1, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.all), Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Bool}, Bool})
precompile(Tuple{typeof(Base.:(<)), Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Int32, 1, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Int32, 2, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base._any), typeof(NCDatasets.DiskArrays.is_batch_arg), Tuple{Base.Colon, Base.Colon}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), NCDatasets.DiskArrays.DimsDropper{Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Int64, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{typeof(Base.:(==)), Int64})
precompile(Tuple{typeof(Base.tuple_type_tail), Type})
precompile(Tuple{typeof(Base.argtail), TypeVar, TypeVar})
precompile(Tuple{typeof(Base.argtail), TypeVar})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:dims,), Tuple{Int64}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt64}})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Flatten{Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NCDatasets.DiskArrays.GridChunks{0, Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Tuple{}, Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), Bool})
precompile(Tuple{typeof(Base.add_sum), Bool, Bool})
precompile(Tuple{typeof(Base.add_sum), Int64, Bool})
precompile(Tuple{typeof(Base.add_sum), Int64, Int64})
precompile(Tuple{typeof(Base.oneto), Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.reverse), Tuple{Int64}})
precompile(Tuple{Type{Base.Returns{V} where V}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Base.OneTo{Int64}}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ExtremaMap{typeof(Base.identity)}, Base.BottomRF{typeof(Base._extrema_rf)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base._extrema_rf)}, Symbol})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Int64}, Base.Val{2}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.filter_rec), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Tuple{}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt16})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt8})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:checkoverflow,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Int32, 2, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(NCDatasets.DiskArrays.interpret_indices_disk), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{Base.Colon, Base.Colon}})
precompile(Tuple{Type{Array{Int32, N} where N}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(NCDatasets.DiskArrays.readblock!), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Array{Int32, 2}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets._read_data_from_nc!), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Array{Int32, 2}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets.size_getindex), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets._size_getindex), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{}, Int64, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{NCDatasets.DiskArrays.DimsDropper{Tuple{}}, Array{Int32, 2}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Float64, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Float64, 1, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Float64, 1, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Float64, 2, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Float64, 2, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(NCDatasets.DiskArrays.interpret_indices_disk), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{Base.Colon, Base.Colon}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(NCDatasets.DiskArrays.readblock!), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Array{Float64, 2}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets._read_data_from_nc!), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Array{Float64, 2}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets.size_getindex), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Base.OneTo{Int64}, Vararg{Base.OneTo{Int64}}})
precompile(Tuple{typeof(NCDatasets._size_getindex), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{}, Int64, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{NCDatasets.DiskArrays.DimsDropper{Tuple{}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.setproperty!), VoronoiMeshes.VertexInfo{false, 6, Int32, Float64, Zeros.Zero}, Symbol, Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 0, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 0, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Char, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Char, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.setproperty!), VoronoiMeshes.VertexInfo{true, 6, Int32, Float64, Float64}, Symbol, Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(Base._atexit), Int32})
precompile(Tuple{typeof(Base.hasmethod), Any, Any})
