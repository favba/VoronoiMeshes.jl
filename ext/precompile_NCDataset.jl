precompile(Tuple{typeof(NCDatasets.nc_open), String, UInt16})
precompile(Tuple{Type{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32, Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32, Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), Type{Int32}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Int32, 1, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.tuple_type_tail), Type})
precompile(Tuple{typeof(Base.argtail), TypeVar})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:dims,), Tuple{Int64}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getproperty), NCDatasets.DiskArrays.GridChunks{0, Tuple{}}, Symbol})
precompile(Tuple{Type{NCDatasets.DiskArrays.SubRanges{S} where S}, NCDatasets.DiskArrays.CanStepRange, Float64})
precompile(Tuple{Type{NCDatasets.DiskArrays.Unchunked{BS} where BS}, NCDatasets.DiskArrays.SubRanges{NCDatasets.DiskArrays.CanStepRange}})
precompile(Tuple{Type{NCDatasets.DiskArrays.Chunked{BS} where BS}, NCDatasets.DiskArrays.SubRanges{NCDatasets.DiskArrays.CanStepRange}})
precompile(Tuple{Type{NCDatasets.DiskArrays.NoBatch{S} where S}, Bool, Float64})
precompile(Tuple{typeof(Base.convert), Type{Bool}, Bool})
precompile(Tuple{typeof(Base.:(<)), Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Int32, 1, NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon})
precompile(Tuple{typeof(Base.reverse), Tuple{Int64}})
precompile(Tuple{Type{Tuple{T} where T}, Tuple{Int64}})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Int32, 2, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.argtail), TypeVar, TypeVar})
precompile(Tuple{typeof(Base.getproperty), NCDatasets.DiskArrays.DiskIndex{0, 0, Tuple{}, Tuple{}, Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Int32, 2, NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.reverse), Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple{T, T} where T}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(NCDatasets.size_getindex), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(NCDatasets._size_getindex), NCDatasets.Variable{Int32, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{}, Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Float64, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Float64, 1, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Float64, 1, NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(NCDatasets.CommonDataModel._getattrib), NCDatasets.NCDataset{Nothing, Base.Missing}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, String, String, Nothing})
precompile(Tuple{Type{NCDatasets.CommonDataModel.CFVariable{Float64, 2, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}}, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Base.getindex), NCDatasets.CommonDataModel.CFVariable{Float64, 2, NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, NCDatasets.CommonDataModel.Attributes{NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NamedTuple{(:fillvalue, :missing_values, :scale_factor, :add_offset, :calendar, :time_origin, :time_factor, :maskingvalue), Tuple{Nothing, Tuple{}, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Missing}}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(NCDatasets.size_getindex), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(NCDatasets._size_getindex), NCDatasets.Variable{Float64, 2, NCDatasets.NCDataset{Nothing, Base.Missing}}, Tuple{}, Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.setproperty!), VoronoiMeshes.VertexInfo{false, 6, Int32, Float64, Zeros.Zero}, Symbol, Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{Type{NCDatasets.Variable{Float64, 0, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Float64, 0, NCDatasets.NCDataset{Nothing, Base.Missing}}})
precompile(Tuple{Type{NCDatasets.Variable{Char, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}}, NCDatasets.NCDataset{Nothing, Base.Missing}, Int32, Tuple{Int32}})
precompile(Tuple{Type{NCDatasets.CommonDataModel.Attributes{TDS} where TDS<:Union{NCDatasets.CommonDataModel.AbstractDataset, NCDatasets.CommonDataModel.AbstractVariable{T, N} where N where T}}, NCDatasets.Variable{Char, 1, NCDatasets.NCDataset{Nothing, Base.Missing}}})
