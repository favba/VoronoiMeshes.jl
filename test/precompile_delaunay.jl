precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#353#354"{DelaunayTriangulationExt.var"#23#27"}, Base.BottomRF{typeof(Base._rf_findmax)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base._rf_findmax)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#355#356"{DelaunayTriangulationExt.var"#24#28"}, Base.BottomRF{typeof(Base._rf_findmin)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#353#354"{DelaunayTriangulationExt.var"#25#29"}, Base.BottomRF{typeof(Base._rf_findmax)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#355#356"{DelaunayTriangulationExt.var"#26#30"}, Base.BottomRF{typeof(Base._rf_findmin)}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:IntegerType,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{Type{NamedTuple{(:IntegerType, :EdgeType, :TriangleType, :EdgesType, :TrianglesType, :weights, :boundary_curves, :boundary_enricher, :build_cache), T} where T<:Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DelaunayTriangulation.ZeroWeight{Float64}, Tuple{}, Nothing, Base.Val{true}}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays._length_match_size), Int64, Tuple{}})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any})
precompile(Tuple{Type{NamedTuple{(:weights, :IntegerType, :EdgeType, :TriangleType, :EdgesType, :TrianglesType, :build_cache), T} where T<:Tuple}, Tuple{DelaunayTriangulation.ZeroWeight{Float64}, DataType, DataType, DataType, DataType, DataType, Base.Val{false}}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rm_singleton_indices), Tuple{Bool}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:protect_boundary, :update_ghost_edges), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:predicates, :reconstruct), T} where T<:Tuple}, Tuple{DelaunayTriangulation.AdaptiveKernel, Bool}})
precompile(Tuple{Type{NamedTuple{(:precision,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{Type{NamedTuple{(:clip,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Float64, Float64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:skip_ghost_vertices,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:project,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt16})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt64}})
precompile(Tuple{Type{UndefKeywordError}, Symbol})
precompile(Tuple{Type{NamedTuple{(:cache_id,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerTrivial{Random.UInt52Raw{UInt64}, UInt64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerTrivial{Random.CloseOpen12{Float64}, Float64}, Symbol})
precompile(Tuple{Type{NamedTuple{(:clip, :clip_polygon, :rng, :predicates), T} where T<:Tuple}, Tuple{Bool, Nothing, Random.TaskLocalRNG, DelaunayTriangulation.AdaptiveKernel}})
precompile(Tuple{typeof(DelaunayTriangulation.is_true), Bool})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Zeros.One})
precompile(Tuple{typeof(Base.afoldl), Function, Int64})
precompile(Tuple{typeof(Base.:(/)), Zeros.One, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{TensorsLite.VecArray{TensorsLite.Vec{Union{Zeros.Zero, Float64}, 1, Float64, Float64, Zeros.Zero}, 1, Array{Float64, 1}, Array{Float64, 1}, Array{Zeros.Zero, 1}}, TensorsLite.VecArray{TensorsLite.Vec{Union{Zeros.Zero, Float64}, 1, Float64, Float64, Zeros.Zero}, 1, Array{Float64, 1}, Array{Float64, 1}, Array{Zeros.Zero, 1}}}}, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(DelaunayTriangulationExt.const_density), Base.BottomRF{typeof(Base.max)}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Zeros.Zero, Zeros.Zero}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Zeros.Zero, Zeros.Zero}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<)), Zeros.Zero, Int64})
precompile(Tuple{typeof(Base.map), typeof(Base.unchecked_oneto), Tuple{Int64}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.length), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.last), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Symbol}})
precompile(Tuple{typeof(Base.map), typeof(Base.unchecked_oneto), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.:(&))}, Symbol})
precompile(Tuple{typeof(Base.mod), Int64, Int64})
precompile(Tuple{typeof(Base.min), Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, ImmutableVectors.var"#18#23", Tuple{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, ImmutableVectors.var"#19#24", Tuple{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.struct_subpadding), Type{TensorsLite.Vec{Union{Zeros.Zero, Float64}, 1, Float64, Float64, Zeros.Zero}}, Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.length), typeof(Base.max)}, Symbol})
precompile(Tuple{ImmutableVectors.var"##s5#13", Vararg{Any, 7}})
precompile(Tuple{typeof(Base.:(+)), Int64, Int32})
precompile(Tuple{Type{VoronoiMeshes.VoronoiMesh{S, maxEdges, TI, TF, Tz} where Tz where TF where TI where maxEdges where S}, Int64, Float64, Float64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DelaunayTriangulation.BoundingBox, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, DelaunayTriangulation.PolygonTree{Int64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{DelaunayTriangulation.Cell{Float64}, Float64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Tuple{Int64, Int64}, Int64}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Base.Threads.var"#1#2"{DelaunayTriangulationExt.var"#4#threadsfor_fun#18"{DelaunayTriangulationExt.var"#4#threadsfor_fun#17#19"{TensorsLite.VecArray{TensorsLite.Vec{Union{Zeros.Zero, Float64}, 1, Float64, Float64, Zeros.Zero}, 1, Array{Float64, 1}, Array{Float64, 1}, Array{Zeros.Zero, 1}}, Float64, Float64, typeof(DelaunayTriangulationExt.const_density), Array{Tuple{Float64, Float64}, 1}, Base.Dict{Int64, Array{Int64, 1}}, Base.OneTo{Int64}}}, Int64}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{Type{ImmutableVectors.ImmutableVector{MAX_N, T} where T where MAX_N}, NTuple{16, Int64}, UInt8})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{ImmutableVectors.ImmutableVector{16, Int32}, 1}, ImmutableVectors.ImmutableVector{16, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Int32, Int32, Int32}, 1}, Tuple{Int64, Int64, Int64}, Int64})
precompile(Tuple{Type{VoronoiMeshes.VoronoiMesh{S, maxEdges, TI, TF, Tz} where Tz where TF where TI where maxEdges where S}, VoronoiMeshes.VoronoiDiagram{false, 7, Int32, Float64, Zeros.Zero}})
precompile(Tuple{typeof(Base.:(+)), UInt8, UInt8})
precompile(Tuple{Base.Threads.var"#1#2"{VoronoiMeshes.var"#30#threadsfor_fun#9"{VoronoiMeshes.var"#30#threadsfor_fun#8#10"{ImmutableVectors.ImmutableVectorArray{7, Int32, 1, Array{NTuple{7, Int32}, 1}}, ImmutableVectors.ImmutableVectorArray{7, Int32, 1, Array{NTuple{7, Int32}, 1}}, Array{Tuple{Int32, Int32, Int32}, 1}, Array{NTuple{7, Int32}, 1}, Base.OneTo{Int64}}}, Int64}})
precompile(Tuple{Base.Threads.var"#1#2"{VoronoiMeshes.var"#49#threadsfor_fun#15"{VoronoiMeshes.var"#49#threadsfor_fun#12#16"{Int32, ImmutableVectors.ImmutableVectorArray{7, Int32, 1, Array{NTuple{7, Int32}, 1}}, Array{Tuple{Int32, Int32}, 1}, Array{NTuple{7, Int32}, 1}, Base.OneTo{Int64}}}, Int64}})
precompile(Tuple{Base.Threads.var"#1#2"{VoronoiMeshes.var"#66#threadsfor_fun#28"{VoronoiMeshes.var"#66#threadsfor_fun#21#29"{Array{Tuple{Int32, Int32, Int32}, 1}, Array{Tuple{Int32, Int32, Int32}, 1}, Array{Tuple{Int32, Int32}, 1}, Base.OneTo{Int64}}}, Int64}})
precompile(Tuple{typeof(Base._atexit), Int32})
precompile(Tuple{typeof(Base.hasmethod), Any, Any})
